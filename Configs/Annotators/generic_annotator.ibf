LoadFunctionLibrary ("chooseGeneticCode", {"0":"Universal"});
LoadFunctionLibrary ("GrabBag");


function  _set_up_annotator () {
    if (_annotator_do_inverse_d) {
        // make inverted D
        _D_names = Rows (_D_sequences);
        _D_inverted = {};
        for (k = 0; k < Columns (_D_names); k+=1) {
            _D_inverted [_D_names[k]] = nucleotideReverseComplement (_D_sequences[_D_names[k]]);
        }    
    }

    curID   = 0;
    curCode = 1;
    breaks = (aa_breaks)*3+(-1);


    for (k = 0; k < IG_MRCA_sequence_length; k+=1) {
        _IG_nuc_annotation [k] = curCode;
        if (k == breaks[curID]) {
            curCode += 1;
            curID   += 1;
        }
    }
}

//--------------------------------------------------------------

function GetBestHomology (junction, d) {
    d_names = Rows (d);
    scores  = {};
    inStr   = {{junction, ""}};
    
    
    _dAlignOptions = alignOptions;
    _dAlignOptions ["SEQ_ALIGN_GAP_EXTEND"]      = 0;
    _dAlignOptions ["SEQ_ALIGN_GAP_EXTEND2"]     = 0;
    //_dAlignOptions ["SEQ_ALIGN_FRAMESHIFT"]      = 20
    _dAlignOptions ["SEQ_ALIGN_LOCAL_ALIGNMENT"] = 1;
    _dAlignOptions ["SEQ_ALIGN_NO_TP"]		     = 1;
    
    /*_dAlignOptions = {};
    _dAlignOptions ["SEQ_ALIGN_CHARACTER_MAP"]="ACGT";
	
    scoreMatrix = {
    {5,-1,-4,-4}
    {-4,5,-4,-4}
    {-4,-4,5,-4}
    {-4,-4,-4,5}
    };
    
    
    _dAlignOptions ["SEQ_ALIGN_SCORE_MATRIX"] = 	scoreMatrix;
    _dAlignOptions ["SEQ_ALIGN_GAP_OPEN"]		= 	10;
    _dAlignOptions ["SEQ_ALIGN_GAP_OPEN2"]	= 	5;
    _dAlignOptions ["SEQ_ALIGN_GAP_EXTEND"]	= 	1;
    _dAlignOptions ["SEQ_ALIGN_GAP_EXTEND2"]	= 	1;
    _dAlignOptions ["SEQ_ALIGN_AFFINE"]		=   1;
    _dAlignOptions ["SEQ_ALIGN_NO_TP"]		=   1;*/
    
    max_score = -1e100;
    
    for (d_allele = 0; d_allele < Abs (d); d_allele += 1) {
        inStr[1] = d[d_names[d_allele]];
        AlignSequences(aligned, inStr, _dAlignOptions);
        local_score = (aligned[0])[0];// / Abs ( d[d_names[d_allele]]);
        
        //fprintf (stdout, d_names[d_allele], "=>", local_score, "\n");
        
        if (local_score > max_score) {
            max_score     = local_score;
            best_allele   = d_names[d_allele];
            best_sequence = (aligned[0])[1];
        } else {
            if (local_score == max_score) {
                best_allele += "|" + d_names[d_allele];
            }
        }
        
    }    
    
    
    return {"SCORE" : max_score, 
            "ALLELE" : best_allele, 
            "SEQUENCE": best_sequence};
            
}

//--------------------------------------------------------------

function MapIGH (ref,qry)
{
    qryWithN = "";
    qlen = Abs (qry);
    for (k = 0; k < qlen; k+=1) {
        if (k % 3 == 0 && k + 2 < qlen) {
            if (qry[k] == "-" && qry[k+1] == "-" && qry[k+2] == "-") {
                qryWithN += "---";
                k += 2;
                continue;
            }
        }
        if (qry[k] == "-") {
            qryWithN += "N";
        } else {
            qryWithN += qry[k];
        }
    }
    
    
	coords 	   = remapSequenceCoordinatesToReference (ref, qryWithN);
	_IGHHReport = {};
	
	for (k = 0; k < Abs (_extraOutputColumns); k+=1) {
	    _IGHHReport[_extraOutputColumns[k]] = None;
	}
		
	_IGHHReport ["Mapped Read"] = qryWithN;
	_codonMappingIGHH = defineCodonToAA();
	currentL         = 0;
	
	// replace all triplet gaps with nothing
	// replace all remaining gaps with N
	qryNoGaps = (qry ^ {{"---",""}}) ^ {{"-","N"}};

    
	jRegionChunk = None;
	
	gapped_spans = {Abs (_features) + 1, 1};
		
	for (k = 1; k <= Abs (_features); k+=1) {
	
		thisSpan = coords[coords["_IG_nuc_annotation[_MATRIX_ELEMENT_VALUE_]==k__"]];
		
		thisSpanL = Columns(thisSpan);
		if (thisSpanL) {
			subSeq        = qryNoGaps[currentL][currentL+thisSpanL-1];
			
			non_gap_count = 0;
			for (k2 = gapped_spans[k-1]; k2 < qlen && non_gap_count < thisSpanL; k2+=1) {
			    if (qryWithN[k2] != "-") {
			        non_gap_count += 1;
			    }
			}
			gapped_spans [k] = k2;
			
			//fprintf (stdout, subSeq, "\n",  qryWithN[gapped_spans[k-1]][gapped_spans[k]-1], "\n\n");
			
			_IGHHReport [_features[k-1]] = subSeq;
			_IGHHReport [_features[k-1] + "_AA"] =  translateCodonToAA (subSeq,_codonMappingIGHH,0);
			
			if (_features[k-1] == "J") {
                if (None != jMotifFallBack) {
                    if (thisSpan[thisSpanL-1] >= jMotifFallBack) {
                        jRegionChunk = jMotifFallBack - thisSpan[0] - 1;
                        
                        if (jRegionChunk > 0) {
                            jRegionChunk = qryNoGaps[currentL][currentL + jRegionChunk];
                        }
                        else {
                            jRegionChunk = None;
                        }
                    }
                }
            }
            
			currentL += thisSpanL;
		}
		else {
			_IGHHReport [_features[k-1]] = "";
			_IGHHReport [_features[k-1] + "_AA"] = "";
		}
	}
	
	
	// pull out the junction 
	
	_IGHHReport["ALIGNMENT_SPANS"] = gapped_spans;
	_IGHHReport["JUNCTION"]    = "";
	_IGHHReport["JUNCTION_AA"] = "";
	
    if (Abs (_IGHHReport ["FW3_AA"]) && Abs (_IGHHReport ["J_AA"])) {
	    // find the last "C" in FW3_AA
	    whereAreTheC = _IGHHReport ["FW3_AA"] || "C";
	    if (whereAreTheC[0] >= 0) {
	        whereAreTheC = whereAreTheC[Rows(whereAreTheC)-1];
	        // find the motif in "J"
	        jMotif = _IGHHReport ["J_AA"] $ jMotifRegExp;
	        if (jMotif[0] >= 0) {
	            jMotif = jMotif[0];
	            _IGHHReport ["JUNCTION"] = (_IGHHReport ["FW3"])[whereAreTheC*3][Abs(_IGHHReport ["FW3"])-1] + _IGHHReport["CDR3"] + (_IGHHReport["J"])[0][3*jMotif+2];
	            _IGHHReport ["J"] = (_IGHHReport ["J"])[3*(jMotif+1)][Abs (_IGHHReport ["J"])];
	        } else {
	            if (None != jRegionChunk) {
	                _IGHHReport ["JUNCTION"] = (_IGHHReport ["FW3"])[whereAreTheC*3][Abs(_IGHHReport ["FW3"])-1] 
	                                           + _IGHHReport["CDR3"] + jRegionChunk;
	                //fprintf (stdout, "Alignment-based J\n", Abs(_IGHHReport ["JUNCTION"]), "\n");
	                _IGHHReport ["J"] = (_IGHHReport ["J"])[Abs (jRegionChunk)][Abs (_IGHHReport ["J"])-1];
	            }
	        }
	        if (Abs (_IGHHReport["JUNCTION"])) {
	            _IGHHReport ["CDR3"] = (_IGHHReport ["JUNCTION"])[3][Abs (_IGHHReport ["JUNCTION"]) - 4];           
	            _IGHHReport ["JUNCTION_AA"] =  translateCodonToAA (_IGHHReport["JUNCTION"],_codonMappingIGHH,0);
	            _IGHHReport ["CDR3_AA"]     =  translateCodonToAA (_IGHHReport["CDR3"],_codonMappingIGHH,0);
	            _IGHHReport ["J_AA"]        =  translateCodonToAA (_IGHHReport["J"],_codonMappingIGHH,0);
	        }
	    }
	}
		
	// try to pull out some "D" sequences
		
	if (Abs (_IGHHReport["JUNCTION"]) > 0) {
	    direct_d = GetBestHomology (_IGHHReport["JUNCTION"], _D_sequences);
	    _IGHHReport ["D_ALLELE"] = direct_d["ALLELE"];
	    _IGHHReport ["D"] = direct_d["SEQUENCE"];
	    _IGHHReport ["D_AA"] = translateCodonToAA (_IGHHReport ["D"],_codonMappingIGHH,0);
	    
	    if (_annotator_do_inverse_d) {
	        inverse_d = GetBestHomology (_IGHHReport["JUNCTION"], _D_inverted);
            _IGHHReport ["D/INV_ALLELE"] = inverse_d["ALLELE"];
            _IGHHReport ["D/INV"] = inverse_d["SEQUENCE"];
            _IGHHReport ["D/INV_AA"] = translateCodonToAA (inverse_d["SEQUENCE"],_codonMappingIGHH,0);	   
            _IGHHReport ["D/INV_SCORE"] = inverse_d ["SCORE"]; 
	        _IGHHReport ["D_SCORE"] = direct_d["SCORE"];
        }
	}
	
	/*_IGHHReport ["D_ALLELE"] = best_allele;
	_IGHHReport ["D"] = best_sequence;
	_IGHHReport ["D_AA"] = translateCodonToAA (best_sequence,_codonMappingIGHH,0);*/
	
	for (k = 0; k < Abs (qry); k+=1) {
		if (coords[k] < 0) {
			break;
		}
	}
	
	//fprintf (stdout, _IGHHReport, "\n");
	//assert (0);
	
	return _IGHHReport;
}

