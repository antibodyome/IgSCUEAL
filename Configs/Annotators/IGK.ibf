IG_MRCA_sequence_length = 339;
_IG_nuc_annotation = {1,IG_MRCA_sequence_length};
aa_breaks = {{26,38,55,58,94,101,113}};
jMotifRegExp       = "[FW]G.G";

_features           = {"0" : "FW1", "1": "CDR1", "2": "FW2", "3": "CDR2", "4": "FW3", "5": "CDR3", "6": "J"};

_extraOutputColumns = {"0": "FW1", 
                       "1": "FW1_AA",
                       "2": "CDR1", 
                       "3": "CDR1_AA",
                       "4": "FW2", 
                       "5": "FW2_AA",
                       "6": "CDR2",
                       "7": "CDR2_AA", 
                       "8": "FW3",
                       "9": "FW3_AA", 
                       "10": "CDR3",
                       "11": "CDR3_AA",
                       "12": "JUNCTION",
                       "13": "JUNCTION_AA",
                       "14" : "J",
                       "15" : "J_AA",
                       "16" : "Mapped Read"};


//--------------------------------------------------------------

breaks = (aa_breaks)*3+(-1);
curID   = 0;
curCode = 1;


for (k = 0; k < IG_MRCA_sequence_length; k+=1) {
	_IG_nuc_annotation [k] = curCode;
	if (k == breaks[curID]) {
		curCode += 1;
		curID   += 1;
	}
}

LoadFunctionLibrary ("chooseGeneticCode", {"0":"Universal"});
LoadFunctionLibrary ("GrabBag");

//--------------------------------------------------------------

function MapIGK (ref,qry)
{
    qryWithN = "";
    for (k = 0; k < Abs(qry); k+=1) {
        if (k % 3 == 0) {
            if (qry[k] == "-" && qry[k+1] == "-" && qry[k+2] == "-") {
                qryWithN += "---";
                k += 2;
                continue;
            }
        }
        if (qry[k] == "-") {
            qryWithN += "N";
        } else {
            qryWithN += qry[k];
        }
    }
	coords 	   = remapSequenceCoordinatesToReference (ref, qryWithN);
 	//fprintf ("/Users/sergei/Desktop/igg.fas", CLEAR_FILE,">ref\n", ref, "\n>qry\n", qry, "\n>qryN\n", qryWithN, "\n");
 		
	_IGKHReport = {};
	_IGKHReport ["Mapped Read"] = qryWithN;

	_codonMappingIGHH = defineCodonToAA();
	currentL         = 0;
	// replace all triplet gaps with nothing
	// replace all remaining gaps with N
	qryNoGaps = (qry ^ {{"\\-\\-\\-",""}}) ^ {{"\\-","N"}};
	
	
	for (k = 1; k <= Abs (_features); k+=1) {
		thisSpan = coords[coords["_IG_nuc_annotation[_MATRIX_ELEMENT_VALUE_]==k__"]];
		thisSpanL = Columns(thisSpan);
		if (thisSpanL) {
			subSeq = qryNoGaps[currentL][currentL+thisSpanL-1];
			currentL += thisSpanL;
			//fprintf (stdout, "\n\n", subSeq, "\n", translateCodonToAA (subSeq,_codonMappingIGHH,0), "\n");
			_IGKHReport [_features[k-1]] = subSeq;
			_IGKHReport [_features[k-1] + "_AA"] =  translateCodonToAA (subSeq,_codonMappingIGHH,0);
		}
		else {
			_IGKHReport [_features[k-1]] = "";
			_IGKHReport [_features[k-1] + "_AA"] = "";
		}
	}
	
	// pull out the junction 
	
	_IGKHReport["JUNCTION"] = "";
	_IGKHReport["JUNCTION_AA"] = "";
    if (Abs (_IGKHReport ["FW3_AA"]) && Abs (_IGKHReport ["J_AA"])) {
	    // find the last "C" in FW3_AA
	    whereAreTheC = _IGKHReport ["FW3_AA"] || "C";
	    if (whereAreTheC[0] >= 0) {
	        whereAreTheC = whereAreTheC[Rows(whereAreTheC)-1];
	        // find the motif in "J"
	        jMotif = _IGKHReport ["J_AA"] $ jMotifRegExp;
	        if (jMotif[0] >= 0) {
	            jMotif = jMotif[0];
	            _IGKHReport ["JUNCTION"] = (_IGKHReport ["FW3"])[whereAreTheC*3][Abs(_IGKHReport ["FW3"])-1] + _IGKHReport["CDR3"] + (_IGKHReport["J"])[0][3*jMotif+2];
	            _IGKHReport ["JUNCTION_AA"] =  translateCodonToAA (_IGKHReport["JUNCTION"],_codonMappingIGHH,0);
	        }
	    }
	}
	
	
	return _IGKHReport;
}

