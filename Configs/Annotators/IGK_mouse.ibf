IG_MRCA_sequence_length = 669;
aa_breaks = {{25,35,51,62,102,105,125}};
_IG_nuc_annotation = {1,IG_MRCA_sequence_length};

_extraOutputColumns = {"0": "FW1", "1": "CDR1", "2": "FW2", "3": "CDR2", "4": "FW3", "5": "CDR3", "6": "J", "7": "C"};

curID   = 0;
curCode = 1;
breaks = (aa_breaks)*3+(-1);

for (k = 0; k < IG_MRCA_sequence_length; k+=1)
{
	_IG_nuc_annotation [k] = curCode;
	if (k == breaks[curID])
	{
		curCode += 1;
		curID += 1;
	}
}

LoadFunctionLibrary ("chooseGeneticCode", {"0":"Universal"});
LoadFunctionLibrary ("GrabBag");

//--------------------------------------------------------------

function MapIGK (ref,qry)
{
	coords 	   = remapSequenceCoordinatesToReference (ref, qry);
	_IGKReport = {};
	//fprintf (stdout, ref, "\n", qry, "\n", coords, "\n");
	
	_codonMappingIGK = defineCodonToAA();
	currentL         = 0;
	qryNoGaps = qry ^ {{"\\-",""}};
	
	for (k = 1; k <= Abs (_extraOutputColumns); k+=1)
	{
		thisSpan = coords[coords["_IG_nuc_annotation[_MATRIX_ELEMENT_VALUE_]==k__"]];
		thisSpanL = Columns(thisSpan);
		if (thisSpanL)
		{
			subSeq = qryNoGaps[currentL][currentL+thisSpanL-1];
			currentL += thisSpanL;
			//fprintf (stdout, "\n\n", subSeq, "\n", translateCodonToAA (subSeq,_codonMappingIGK,0), "\n");
			_IGKReport [_extraOutputColumns[k-1]] = subSeq;
		}
		else
		{
			_IGKReport [_extraOutputColumns[k-1]] = "";
		}
	}
	
	for (k = 0; k < Abs (qry); k+=1)
	{
		if (coords[k] < 0)
		{
			break;
		}
		//fprintf (stdout, _IG_nuc_annotation[coords[k]]);
	}
	
	
	//_IGKReport["REF_AL"] = ref;
	//_IGKReport["QRY_AL"] = qry;

	//fprintf (stdout, "\n>1\n", ref, "\n>2\n", qry, "\n");

	//fprintf (stdout, "\n", _IGKReport, "\n");
	
	return _IGKReport;
}

