/*
FR1 	0-74		1
CDR1 	75-104		2
FR2 	105-152		3
CDR2 	153-185		4
FR3		186-305		5
CDR3	305-314		6
J		315-374		7
*/

_features           = {"0" : "FW1", "1": "CDR1", "2": "FW2", "3": "CDR2", "4": "FW3", "5": "CDR3", "6": "J"};

_extraOutputColumns = {"0": "FW1", 
                       "1": "FW1_AA",
                       "2": "CDR1", 
                       "3": "CDR1_AA",
                       "4": "FW2", 
                       "5": "FW2_AA",
                       "6": "CDR2",
                       "7": "CDR2_AA", 
                       "8": "FW3",
                       "9": "FW3_AA", 
                       "10": "CDR3",
                       "11": "CDR3_AA",
                       "12": "JUNCTION",
                       "13": "JUNCTION_AA",
                       "14": "D_ALLELE",
                       "15": "D",
                       "16" : "D_AA",
                       "17" : "J",
                       "18" : "J_AA"};


breaks = {{74,104,152,185,305,314,374}};

_D_sequences = {
"D3_16" : "GTATTATGATTACGTTTGGGGGAGTTATGCTTATACC",
"D3_10" : "GTATTACTATGGTTCGGGGAGTTATTATAAC",
"D3_22" : "GTATTACTATGATAGTAGTGGTTATTACTAC",
"D3_3"  : "GTATTACGATTTTTGGAGTGGTTATTATACC",
"D3_9"  : "GTATTACGATATTTTGACTGGTTATTATAAC",
"D1_26" : "GGTATAGTGGGAGCTACTAC",
"D1_1"  : "GGTACAACTGGAACGAC",
"D1_20" : "GGTATAACTGGAACGAC",
"D1_7"  : "GGTATAACTGGAACTAC",
"D7_27" : "CTAACTGGGGA",
"D2_15" : "AGGATATTGTAGTGGTGGTAGCTGCTACTCC",
"D2_2" :  "AGGATATTGTAGTAGTACCAGCTGCTATGCC",
"D2_21" : "AGCATATTGTGGTGGTGATTGCTATTCC",
"D2_8" :  "AGGATATTGTACTAATGGTGTATGCTATACC",
"D4_23" : "TGACTACGGTGGTAACTCC",
"D4_11" : "TGACTACAGTAACTAC",
"D4_17" : "TGACTACGGTGACTAC",
"D5_12" : "GTGGATATAGTGGCTACGATTAC",
"D5_18" : "GTGGATACAGCTATGGTTAC"};


_IGGH_nuc_annotation = {1,375};

curID   = 0;
curCode = 1;


for (k = 0; k < 375; k+=1) {
	_IGGH_nuc_annotation [k] = curCode;
	if (k == breaks[curID]) {
		curCode += 1;
		curID   += 1;
	}
}

LoadFunctionLibrary ("chooseGeneticCode", {"0":"Universal"});
LoadFunctionLibrary ("GrabBag");

//--------------------------------------------------------------

function MapIGG (ref,qry)
{
    qryWithN = "";
    for (k = 0; k < Abs(qry); k+=1) {
        if (k % 3 == 0) {
            if (qry[k] == "-" && qry[k+1] == "-" && qry[k+2] == "-") {
                qryWithN += "---";
                k += 2;
                continue;
            }
        }
        if (qry[k] == "-") {
            qryWithN += "N";
        } else {
            qryWithN += qry[k];
        }
    }
	coords 	   = remapSequenceCoordinatesToReference (ref, qryWithN);
 	//fprintf ("/Users/sergei/Desktop/igg.fas", CLEAR_FILE,">ref\n", ref, "\n>qry\n", qry, "\n>qryN\n", qryWithN, "\n");
	_IGHHReport = {};
	
	_codonMappingIGHH = defineCodonToAA();
	currentL         = 0;
	// replace all triplet gaps with nothing
	// replace all remaining gaps with N
	qryNoGaps = (qry ^ {{"\\-\\-\\-",""}}) ^ {{"\\-","N"}};
	
	
	for (k = 1; k <= Abs (_features); k+=1) {
		thisSpan = coords[coords["_IGGH_nuc_annotation[_MATRIX_ELEMENT_VALUE_]==k__"]];
		thisSpanL = Columns(thisSpan);
		if (thisSpanL) {
			subSeq = qryNoGaps[currentL][currentL+thisSpanL-1];
			currentL += thisSpanL;
			//fprintf (stdout, "\n\n", subSeq, "\n", translateCodonToAA (subSeq,_codonMappingIGHH,0), "\n");
			_IGHHReport [_features[k-1]] = subSeq;
			_IGHHReport [_features[k-1] + "_AA"] =  translateCodonToAA (subSeq,_codonMappingIGHH,0);
		}
		else {
			_IGHHReport [_features[k-1]] = "";
			_IGHHReport [_features[k-1] + "_AA"] = "";
		}
	}
	
	// pull out the junction 
	
	_IGHHReport["JUNCTION"] = "";
	_IGHHReport["JUNCTION_AA"] = "";
    if (Abs (_IGHHReport ["FW3_AA"]) && Abs (_IGHHReport ["J_AA"])) {
	    // find the last "C" in FW3_AA
	    whereAreTheC = _IGHHReport ["FW3_AA"] || "C";
	    if (whereAreTheC[0] >= 0) {
	        whereAreTheC = whereAreTheC[Rows(whereAreTheC)-1];
	        // find the motif in "J"
	        jMotif = _IGHHReport ["J_AA"] $ "[FW]G.G";
	        if (jMotif[0] >= 0) {
	            jMotif = jMotif[0];
	            _IGHHReport ["JUNCTION"] = (_IGHHReport ["FW3"])[whereAreTheC*3][Abs(_IGHHReport ["FW3"])-1] + _IGHHReport["CDR3"] + (_IGHHReport["J"])[0][3*jMotif+2];
	            _IGHHReport ["JUNCTION_AA"] =  translateCodonToAA (_IGHHReport["JUNCTION"],_codonMappingIGHH,0);
	        }
	    }
	}
	
	
	// try to pull out some "D" sequences
	if (Abs (_IGHHReport["JUNCTION"]) > 0) {
	    
	    d_names = Rows (_D_sequences);
	    scores  = {};
	    inStr   = {{_IGHHReport ["JUNCTION"], ""}};
	    
	    fprintf (stdout, _IGHHReport ["JUNCTION"], ":", Abs (_IGHHReport ["JUNCTION"]), "\n");
	    
	    _dAlignOptions = alignOptions;
	    _dAlignOptions ["SEQ_ALIGN_GAP_EXTEND"]  = 0;
	    _dAlignOptions ["SEQ_ALIGN_GAP_EXTEND2"] = 0;
	    _dAlignOptions ["SEQ_ALIGN_FRAMESHIFT"] = 100;
	    _dAlignOptions ["SEQ_ALIGN_LOCAL_ALIGNMENT"] = 1;
	    
	    max_score = -1e100;
	    
	    for (d_allele = 0; d_allele < Abs (_D_sequences); d_allele += 1) {
	        inStr[1] = _D_sequences[d_names[d_allele]];
	    	AlignSequences(aligned, inStr, _dAlignOptions);
	    	if ((aligned[0])[0] > max_score) {
	    	    max_score     = (aligned[0])[0];
	    	    best_allele   = d_names[d_allele];
	    	    best_sequence = (aligned[0])[1];
	    	}
	    }
	}
	
	_IGHHReport ["D_ALLELE"] = best_allele;
	_IGHHReport ["D"] = best_sequence;
	_IGHHReport ["D_AA"] = translateCodonToAA (best_sequence,_codonMappingIGHH,0);
	
	for (k = 0; k < Abs (qry); k+=1) {
		if (coords[k] < 0) {
			break;
		}
	}
	
	fprintf (stdout, _IGHHReport, "\n");
	
	return _IGHHReport;
}

