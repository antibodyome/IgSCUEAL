function buildINodeLabel (aKey, aValue) {   	if (_bufferCount > 0) {		if (Abs(simpleSubtype)) {			if (aKey[0] != simpleSubtype) {				simpleSubtype = 0;			}		}		_bufferString * "/";	}	else {		simpleSubtype = aKey[0];	}		_bufferCount += 1;	_bufferString * aKey;	return 0;}function _doLabelGeneration () {	tc 		 = BranchCount (exportT);	_treeAVL = exportT	^ 0; 			_crfEquiv  = {};	_crfNodes  = {};	_pureNodes = {};		for (k=0; k < tc; k += 1) {		nodeName 	    = BranchName (exportT,k);		subtreeAVL	    = exportT[nodeName];		nodeNames	    = Rows(subtreeAVL);		crfType			= {};		pureType		= {};								for (k2 = 1; k2 < Abs (subtreeAVL); k2 += 1) {		   bl = BranchLength (exportT, nodeNames[k2] + ";" + nodeName);		   		   /*if (bl >= 0 && bl <= 1e-8) {				localNodeName = (nodeNames[k2]&&1);				cleanNodeName = localNodeName^{{"^IG[A-Z]"}{""}};								thisLabel = sequenceLabels[localNodeName];		        pureType = {};		        pureType [thisLabel] = 1;		        		        fprintf (stdout, pureType, "\n\n");		        		        break;		   }*/		    			if (((nodeNames[k2]&&1)$"^NODE")[0] < 0) {				localNodeName = (nodeNames[k2]&&1);				cleanNodeName = localNodeName^{{"^IG[A-Z]"}{""}};				thisLabel = sequenceLabels[localNodeName];								findunder = thisLabel $ "-";				//fprintf (stdout, findunder, thisLabel, "\n");				thisLabel = thisLabel[0][findunder[0]-1];				//fprintf (stdout, thisLabel, "\n\n\n");								if (thisLabel/"CRF*") {					crfType  [thisLabel[3][Abs(thisLabel)-1]] = 1;					_crfNodes[localNodeName] = 1;				}				else {					pureType [thisLabel] = 1;				}			}		}				_bufferString = ""; _bufferString * 128;		_bufferCount = 0;						if (Abs(pureType) > 1) {			pureType["buildINodeLabel"][""];			_bufferString * 0;		 	_bufferString * 128;		 				if (Abs(simpleSubtype)) {			 	 _bufferString * (simpleSubtype + "-ancestral");				_pureNodes [nodeName] = simpleSubtype;			}			else {			 	_bufferString * "U";						}		}		else {			if (Abs(pureType) == 1) {				nodeLabel = (Rows(pureType))[0];				_pureNodes [nodeName] = nodeLabel;			}			else {				_bufferString * "CRF";				crfType["buildINodeLabel"][""];				_crfNodes[nodeName] = 1;			}		}		_bufferString * 0;		if (Abs(_bufferString)) {			sequenceLabels [nodeName&&1] = _bufferString;		}		else {			sequenceLabels [nodeName&&1] = nodeLabel;		}	}		tc 		 = Abs (_treeAVL);		for (k = 1; k < tc; k = k+1) {		if (_crfNodes[(_treeAVL[k])["Name"]]) {			pureEquiv = "";			parent = (_treeAVL[k])["Parent"];			while (parent) {				if (Abs(_pureNodes[(_treeAVL[parent])["Name"]])) {					pureEquiv = _pureNodes[(_treeAVL[parent])["Name"]];					break;				}				parent = (_treeAVL[parent])["Parent"];			}			if (Abs(pureEquiv)){				_crfEquiv [(_treeAVL[k])["Name"]&&1] = pureEquiv;			}		}	}	return 0;}