LoadFunctionLibrary ("ReadDelimitedFiles");LoadFunctionLibrary ("TreeTools");function buildINodeLabel (aKey, aValue) {   	if (_bufferCount > 0) {		if (Abs(simpleSubtype)) {			if (aKey[0] != simpleSubtype) {				simpleSubtype = 0;			}		}		_bufferString * "/";	}	else {		simpleSubtype = aKey[0];	}		_bufferCount += 1;	_bufferString * aKey;	return 0;}function dump (key, value) {    fprintf (stdout, "\nChild ", key, "\n", _treeAVL[value], "\n");}function handle_OR_labels (value) {    return value ^ {{"\\-OR","/OR"}};}function _doLabelGeneration (respect_allele) {	_treeAVL            = exportT	^ 0;     _treeNodeCount 	    = Abs (_treeAVL);            for (k = 1; k < _treeNodeCount - 1; k += 1) {            //fprintf (stdout, (_treeAVL[k])["Name"], "\n");            if (Abs ((_treeAVL[k])["Children"]) == 0) {            sequenceLabels[(_treeAVL[k])["Name"]&&1] = handle_OR_labels(sequenceLabels[(_treeAVL[k])["Name"]&&1]);            (_treeAVL[k])["Label"] = sequenceLabels[(_treeAVL[k])["Name"]&&1];                    } else {            if (Abs ((_treeAVL[k])["Label"]) == 0) {                    my_labeling = (_treeAVL[k])["labeler"];                                        _bufferString = "";                    for (part = 0; part < Abs (my_labeling); part += 1) {                        if (Abs (my_labeling[part]) > 1) {                            break;                        }                        if (Abs (_bufferString)) {                            _bufferString += "-";                        }                        _bufferString += (Rows(my_labeling[part]))[0];                    }                                                                                           if (Abs (_bufferString) == 0) {                        _bufferString = ((Rows(my_labeling[0]))[0])[0] + "?";                    }                                    (_treeAVL[k])["Label"] = _bufferString;             }                         sequenceLabels [(_treeAVL[k])["Name"] &&1] = handle_OR_labels((_treeAVL[k])["Label"]);                }                       /*        if (((_treeAVL[k])["Name"] && 1) == "NODE466") {            fprintf (stdout, "\n", _treeAVL[k], "\n");            ((_treeAVL[k])["Children"])["dump"][""];            assert (0);        }*/                _parent_id = (_treeAVL[k])["Parent"];               if ((_treeAVL[k])["Length"] < 1e-8) {            // the parent must have the same classification as this node                        if (Abs ((_treeAVL[_parent_id])["Label"])) {                assert ((_treeAVL[_parent_id])["Label"] == (_treeAVL[k])["Label"],                     (_treeAVL [(_treeAVL[k])["Parent"]])["Name"] + " zero-branch length CONFLICT:"                     + (_treeAVL[_parent_id])["Label"] + " / " + (_treeAVL[k])["Label"]                );            } else {                (_treeAVL[_parent_id])["Label"] = (_treeAVL[k])["Label"];            }            (_treeAVL[_parent_id])["labeler"] = (_treeAVL[k])["labeler"];                    } else {             if (Abs ((_treeAVL[_parent_id])["labeler"]) == 0) {                (_treeAVL[_parent_id])["labeler"] = {};            }                        if (Abs ((_treeAVL[k])["labeler"])) {                thisLabeler = (_treeAVL[k])["labeler"];                for (part = 0; part < Abs (thisLabeler); part += 1) {                    if (Abs ( ((_treeAVL[_parent_id])["labeler"] )[part]) == 0) {                        ((_treeAVL[_parent_id])["labeler"] )[part] = {};                    }                       (((_treeAVL[_parent_id])["labeler"] )[part]) * thisLabeler[part];                }            }   else {                 thisLabel = splitOnRegExp ((_treeAVL[k])["Label"], "[*-]");                for (part = 0; part < Abs (thisLabel); part += 1) {                    if (Abs ( ((_treeAVL[_parent_id])["labeler"] )[part]) == 0) {                        ((_treeAVL[_parent_id])["labeler"] )[part] = {};                    }                       (((_treeAVL[_parent_id])["labeler"] )[part]) [thisLabel[part]] = 1;                }            }        }    }    	return 0;}