LoadFunctionLibrary ("ReadDelimitedFiles");function buildINodeLabel (aKey, aValue) {   	if (_bufferCount > 0) {		if (Abs(simpleSubtype)) {			if (aKey[0] != simpleSubtype) {				simpleSubtype = 0;			}		}		_bufferString * "/";	}	else {		simpleSubtype = aKey[0];	}		_bufferCount += 1;	_bufferString * aKey;	return 0;}function _doLabelGeneration (respect_allele) {	tc 		 = BranchCount (exportT);	_treeAVL = exportT	^ 0; 			_crfEquiv  = {};	_crfNodes  = {};	_pureNodes = {};		// iterate over all internal nodes (post-order)		for (k=0; k < tc; k += 1) {			nodeName 	    = BranchName (exportT,k);		subtreeAVL	    = exportT[nodeName];		nodeNames	    = Rows(subtreeAVL);        my_labeling     = {};						for (k2 = 1; k2 < Abs (subtreeAVL); k2 += 1) { 			if (((nodeNames[k2]&&1)$"^NODE")[0] < 0) {				localNodeName = (nodeNames[k2]&&1);				cleanNodeName = localNodeName^{{"^IG[A-Z]"}{""}};				thisLabel = splitOnRegExp (sequenceLabels[localNodeName], "[*-]");				for (part = 0; part < Abs (thisLabel); part += 1) {				    if (Abs (my_labeling[part]) == 0) {				        my_labeling[part] = {};				    }   				    (my_labeling[part]) [thisLabel[part]] = 1;				}			}		}				_bufferString = "";				for (part = 0; part < Abs (my_labeling); part += 1) {		    if (Abs (my_labeling[part]) > 1) {		        break;		    }		    if (Abs (_bufferString)) {		        _bufferString += "-";		    }		    _bufferString += (Rows(my_labeling[part]))[0];		}				if (Abs(_bufferString)) {			sequenceLabels [nodeName&&1] = _bufferString;		}		else {			sequenceLabels [nodeName&&1] = ((Rows(my_labeling[0]))[0])[0] + "?";		}	}				tc 		 = Abs (_treeAVL);		for (k = 1; k < tc; k = k+1) {		if (_crfNodes[(_treeAVL[k])["Name"]]) {			pureEquiv = "";			parent = (_treeAVL[k])["Parent"];			while (parent) {				if (Abs(_pureNodes[(_treeAVL[parent])["Name"]])) {					pureEquiv = _pureNodes[(_treeAVL[parent])["Name"]];					break;				}				parent = (_treeAVL[parent])["Parent"];			}			if (Abs(pureEquiv)){				_crfEquiv [(_treeAVL[k])["Name"]&&1] = pureEquiv;			}		}	}	return 0;}